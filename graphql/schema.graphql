"""
A datetime string with format `Y-m-d H:i:s`, e.g. `2024-03-25 13:43:32`.
"""
scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

scalar Upload
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")

"""
Indicates what fields are available at the top level of a query operation.
"""
type Query {
    """
    Find a single user by an identifying attribute.
    """
    user(
        """
        Search by primary key.
        """
        id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

        """
        Search by email address.
        """
        email: String
            @eq
            @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    """
    List multiple users.
    """
    users(
        """
        Filters by name. Accepts SQL LIKE wildcards `%` and `_`.
        """
        name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

    me: User @field(resolver: "App\\GraphQL\\Resolvers\\MeResolver")

    products: [Product!]!
        @field(resolver: "App\\GraphQL\\Resolvers\\ProductsResolver")
    product(id: ID! @eq): Product!
        @field(resolver: "App\\GraphQL\\Resolvers\\ProductResolver")
}

"""
Account of a person who utilizes this application.
"""
type User {
    """
    Unique primary key.
    """
    id: ID!

    """
    Non-unique name.
    """
    name: String

    """
    Unique email address.
    """
    email: String

    """
    When the email was verified.
    """
    email_verified_at: DateTime

    """
    The user's orders.
    """
    orders: [Order] @hasMany

    """
    The user stripe ID.
    """
    stripe_id: String

    """
    The user card brand.
    """
    card_brand: String

    """
    The user card last four digits.
    """
    card_last_four: String

    """
    The user trial ends at.
    """
    trial_ends_at: DateTime

    """
    When the account was created.
    """
    created_at: DateTime

    """
    When the account was last updated.
    """
    updated_at: DateTime
}

"""
Represents a product in the application.
"""
type Product {
    id: ID!
    name: String!
    description: String!
    price: Float!
    category: String!
    tags: [String!]!
    images: [String!]!
    ratings: ProductRating @field(resolver: "App\\GraphQL\\Mutations\\CreateReviewMutation@avgRatings")# Represents the ratings of a product.
    reviews: [Review] # Represents the reviews of a product.
}

"""
Input type for uploading images.
"""
input UploadImageInput {
    # The images field represents the uploaded images.
    images: Upload! # Type Upload, which is used to handle file uploads in GraphQL.
}

"""
Represents the rating of a product.
"""
type ProductRating {
    average: Float!
    count: Int!
}

"""
Represents a review of a product.
"""
type Review {
    id: ID!
    product: ID! @belongsTo
    user: ID! @belongsTo
    comment: String!
    rating: Float!
    date: DateTime!
    updated_at: DateTime!
}

"""
Represents an order in the application.
"""
type Order {
    id: ID!
    userId: ID! # Represents the user who placed the order.
    products: [OrderProduct!]! #Represents a list of products in an order.
    totalPrice: Float!
    status: String!
    date: String!
}

"""
Represents a product in an order.
"""
type OrderProduct {
    productId: ID! # Represents the product ID.
    quantity: Int! # Represents the quantity of the product.
}

"""
Mutation operations for the application.
"""
type Mutation {
    """
    Mutation to create a new product.
    """
    createProduct(input: CreateProductInput!): Product!
        @field(resolver: "App\\GraphQL\\Resolvers\\CreateProductResolver")

    """
    Mutation to register a new user.
    """
    register(input: RegisterInput!): AuthPayload
        @field(resolver: "App\\GraphQL\\Resolvers\\RegisterResolver")

    """
    Mutation to login a user.
    """
    login(input: LoginInput!): AuthPayload
        @field(resolver: "App\\GraphQL\\Mutations\\LoginMutation")

    """
    Mutation to logout the currently authenticated user.
    """
    logout: Boolean @field(resolver: "App\\GraphQL\\Resolvers\\LogoutResolver")

    """
    Mutation to update a user.
    """
    updateUser(id: ID!, input: UpdateUserInput!): User
        @field(resolver: "App\\GraphQL\\Resolvers\\UpdateUserResolver")

    """
    Mutation to create a new product.
    """
    createProduct(input: CreateProductInput!): Product!
        @field(resolver: "App\\GraphQL\\Resolvers\\CreateProductResolver")

    """
    Mutation to create a new review.
    """
    updateProduct(
        """
        Represents the product ID to be updated.
        """
        id: ID!
        input: UpdateProductInput!
    ): Product
        @field(
            resolver: "App\\GraphQL\\Resolvers\\CreateProductResolver@update"
        )
    """
    Mutation to upload images.
    """
    uploadImages(files: [Upload!]!): [String!]!
        @field(resolver: "App\\GraphQL\\Mutations\\UploadImagesMutation")

    """
    Mutation to upload a product file.
    """
    uploadProductFile(
        """
        Represents the product ID to upload the file.
        """
        id: ID!
        file: Upload!
    ): Product @field(resolver: "App\\GraphQL\\Mutations\\UploadProductFile")

    """
    Mutation to create a new order.
    """
    createOrder(input: CreateOrderInput!): Order
        @field(resolver: "App\\GraphQL\\Mutations\\CreateOrderResolver")

    """
    Mutation to create a Stripe charge.
    """
    createStripeCharge(source: String!, order_id: ID!): PaymentResult
        @field(resolver: "App\\GraphQL\\Mutations\\CreateStripeCharge")

    createReview(input: CreateReviewInput!): Review
        @field(resolver: "App\\GraphQL\\Mutations\\CreateReviewMutation")

}

extend type Query {
    # Retrieves the download link for a specific product.
    #
    # Arguments:
    #   - id: The ID of the product to download.
    #
    # Returns:
    #   - A string representing the download link for the product.
    downloadProduct(id: ID!): String
        @field(resolver: "App\\GraphQL\\Resolvers\\ProductFileResolver")
}

"""
Represents an image.
"""
type Image {
    url: String!
}

"""
Input type for user login.
"""
input LoginInput {
    email: String!
    password: String!
}

"""
Represents the authentication payload.
"""
type AuthPayload {
    accessToken: String
    user: User
}

"""
Input type for user registration.
"""
input RegisterInput {
    name: String!
    email: String!
    password: String!
    password_confirmation: String!
}

"""
Input type for updating a user.
"""
input UpdateUserInput {
    name: String
    email: String
}

"""
Input type for creating a product.
"""
input CreateProductInput {
    name: String!
    description: String!
    price: Float!
    category: String!
    tags: [String!]!
    images: [String!]!
}
"""
Input type for update a product.
"""
input UpdateProductInput {
    name: String
    description: String
    price: Float
    category: String
    tags: [String]
    images: [String]
}

"""
Input type for creating a review.
"""
input CreateReviewInput {
    productId: ID! # Represents the product ID.
    comment: String!
    rating: Float!
}

"""
Represents an order in the application.
"""
type Order {
    id: ID!
    user: User @belongsTo # Represents the user who placed the order.
    status: String
    total_price: Float
    items: [OrderItem] @hasMany # Represents the items in the order.
    created_at: DateTime
    updated_at: DateTime
}

"""
Represents an item in an order.
"""
type OrderItem {
    id: ID!
    product: Product @belongsTo # Represents the product in the order item.
    quantity: Int
    price: Float
}

"""
Input type for creating an order.
"""
input CreateOrderInput {
    userId: ID! # Represents the user ID.
    items: [CreateOrderItemInput!]! # Represents the items in the order.
}

"""
Input type for creating an order item.
"""
input CreateOrderItemInput {
    productId: ID! # Represents the product ID.
    quantity: Int!
}

"""
Represents the result of a payment operation.
"""
type PaymentResult {
    success: Boolean # Represents the success of the payment operation.
    message: String # Represents the message of the payment operation.
}
