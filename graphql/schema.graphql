"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

    products: [Product!]!
    product(id: ID!): Product!

}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    orders: [Order!]!

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}
type Product {
    id: ID!
    name: String!
    description: String!
    price: Float!
    category: String!
    tags: [String!]!
    ratings: ProductRating!
    reviews: [Review!]!
}
type ProductRating {
    average: Float!
    count: Int!
}
type Review {
    id: ID!
    productId: ID!
    userId: ID!
    text: String!
    rating: Float!
    date: String!
}
type Order {
    id: ID!
    userId: ID!
    products: [OrderProduct!]!
    totalPrice: Float!
    status: String!
    date: String!
}

type OrderProduct {
    productId: ID!
    quantity: Int!
}
type Mutation {
    createProduct(input: CreateProductInput!): Product!
    createReview(input: CreateReviewInput!): Review!
    # Other mutations
}

input CreateProductInput {
    name: String!
    description: String!
    price: Float!
    category: String!
    tags: [String!]!
}

input CreateReviewInput {
    productId: ID!
    userId: ID!
    text: String!
    rating: Float!
}
